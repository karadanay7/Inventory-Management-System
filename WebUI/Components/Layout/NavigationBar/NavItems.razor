@using System.Security.Claims
@inject UserActiveOrderCountState userState 
<div class="min-w-full flex items-center justify-between bg-base-200">
   <div >
 
        
    
   </div>
   <div>
    <li class="dropdown dropdown-hover ">
    <a tabindex="0" class="btn btn-ghost">
       <svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 20 20"><path fill="currentColor" d="M10 9.25c-2.27 0-2.73-3.44-2.73-3.44C7 4.02 7.82 2 9.97 2c2.16 0 2.98 2.02 2.71 3.81c0 0-.41 3.44-2.68 3.44m0 2.57L12.72 10c2.39 0 4.52 2.33 4.52 4.53v2.49s-3.65 1.13-7.24 1.13c-3.65 0-7.24-1.13-7.24-1.13v-2.49c0-2.25 1.94-4.48 4.47-4.48z"/></svg>
        <span class="ml-2">@Name</span>
        <svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path fill="currentColor" d="m7 10l5 5l5-5z"/></svg>
    </a>
    <ul tabindex="0" class="dropdown-content menu p-2 shadow bg-base-100 rounded-box w-52">
        <li>
            <form action="Account/logout" method="post">
                <AntiforgeryToken />
                <button type="submit" class="btn btn-error btn-block">
                    <i class="fas fa-sign-out-alt"></i> <!-- Placeholder for logout icon -->
                    Logout
                </button>
            </form>
        </li>
    </ul>
</li>
   </div>
   

</div>


@code 
{
    [CascadingParameter] public Task<AuthenticationState>? UserState { get; set; }
    string? Name;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Name = (await UserState!).User.Claims.FirstOrDefault(c => c.Type == "Name")!.Value;
        }
        catch { }
    }
}
