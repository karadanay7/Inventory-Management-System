@page "/Account/login"
@using Application.DTO.Request.Identity
@using Microsoft.AspNetCore.Components.Authorization
@inject IAccountService accountService
@inject NavigationManager Navigation

<div class="min-h-screen flex items-center justify-center ">
    <div class="w-full max-w-md p-8 rounded-lg shadow-lg">
        <h1 class="text-2xl font-semibold mb-6 text-center">Login</h1>
        <EditForm Model="@LoginModel" OnSubmit="LoginAsync" FormName="loginform">
            <DataAnnotationsValidator />
            <ValidationSummary class="mb-4" />

            <div class="mb-4">
                <label class="label">E-mail</label>
            
                <InputText @bind-Value="LoginModel.Email" type="email" class="input input-bordered w-full" placeholder="E-mail" />
            </div>
            <div class="mb-4">
                <label class="label">Password</label>
                <InputText @bind-Value="LoginModel.Password" type="password" class="input input-bordered w-full" placeholder="Password" />
            </div>
            <div class="flex items-center justify-center">
                <button  type="submit" class="btn btn-neutral w-full" >Login</button>
            </div>
            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="alert alert-error mt-4">
                    @ErrorMessage
                </div>
            }
        </EditForm>
    </div>
</div>

@code {
    string ErrorMessage = "";
    public bool IsBusy { get; set; } = false;
    private LoginUserRequestDTO LoginModel { get; set; } = new();

    private async Task LoginAsync()
    {
        if (IsBusy) return;
        ErrorMessage = "";
        IsBusy = true;
        var response = await accountService.LoginAsync(LoginModel);
        if (!response.Flag)
        {
            IsBusy = false;
            ErrorMessage = response.Message;
            return;
        }
        IsBusy = false;
        Navigation.NavigateTo("app/home");
    }

    [CascadingParameter]
    public Task<AuthenticationState>? ClientAuthState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if ((await ClientAuthState!).User.Identity!.IsAuthenticated)
                Navigation.NavigateTo("app/home", false, true);
        }
        catch
        {
            // Optionally handle exceptions
        }
    }
    
}
