@page "/administration/account/activity-log"
@using Application.DTO.Response
@using Application.DTO.Response.ActivityTracker
@inject IAccountService accountService
@inject NavigationManager Navigation
@inject ICustomAuthorizationService customAuthorizationService

@using Microsoft.AspNetCore.Components.Authorization
@rendermode InteractiveServer

<PageTitle>Activity Log</PageTitle>
<div>
    <AdminHomeHeader />
    <div>
        <div class="card">
            <div class="card shadow-lg">
                <div class="card-body">
                    @if (Activities != null && Activities.Any())
                    {
                        @foreach (var group in Activities)
                        {
                            <h3>@group.Key.ToString("g")</h3> <!-- Display the Date -->
                            <table class="table w-full">
                                <thead>
                                    <tr>
                                        <th>Title</th>
                                        <th>Description</th>
                                        <th>Operation Status</th>
                                        <th>User</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var activity in group)
                                    {
                                        <tr>
                                            <td>@activity.Title</td>
                                            <td>@activity.Description</td>
                                           <!-- Assuming there is an OperationStatus property -->
                                            <td>@activity.UserName</td> <!-- Assuming you have UserName property or fetch the name using UserId -->
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                    }
                    else
                    {
                        <p>No activities found</p>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private HubConnection? hubConnection;
    private IEnumerable<IGrouping<DateTime, ActivityTrackerResponseDTO>> Activities = Enumerable.Empty<IGrouping<DateTime, ActivityTrackerResponseDTO>>();
    [CascadingParameter] public Task<AuthenticationState>? UserAuthState { get; set; }

    private async Task GetActivities()
    {
        var activities = await accountService.GroupingActivitiesAsync();
        Activities = activities; // Use the data directly
    }

    protected override async Task OnInitializedAsync()
{
    var authState = await UserAuthState;
    if (!customAuthorizationService.CustomClaimChecker(authState.User, DefaultClaims.ManageUser))
    {
        Navigation.NavigateTo("/Account/Access-Denied");
        return; // Exit early to prevent further execution
    }

    homeGenericState.StateChanged += StateButtonClicked;
    await GetActivities();

    hubConnection = netcodeHubConnectionService.GetHubConnection();
    hubConnection.On<string>("Notify", async (clientId) =>
    {
        await CallWhenNotified();
    });

    if (hubConnection.State == HubConnectionState.Disconnected)
    {
        await hubConnection.StartAsync();
    }
}


    private async Task CallWhenNotified()
    {
        await GetActivities(); // Refresh activities when notified
        StateHasChanged(); // Notify the UI to update
    }

    private void StateButtonClicked()
    {
        string adminOrderUrl = "app/administration/products/orders";
        if (homeGenericState.IsAdmin)
        {
            Navigation.NavigateTo($"{adminOrderUrl}/{homeGenericState.StateName}");
        }
    }
}
