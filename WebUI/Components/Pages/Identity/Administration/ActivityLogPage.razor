@page "/administration/account/activity-log"
@using Application.DTO.Response
@using Application.DTO.Response.ActivityTracker
@inject IAccountService accountService
@inject NavigationManager Navigation
@inject ICustomAuthorizationService customAuthorizationService

@using Microsoft.AspNetCore.Components.Authorization
@rendermode InteractiveServer

<PageTitle>Activity Log</PageTitle>
<div class="p-6">
    <AdminHomeHeader />
    <div class="card shadow-lg">
        <div class="card-body">
            @if (Activities != null && Activities.Any())
            {
                @foreach (var group in Activities)
                {
                    <!-- Date Group Header -->
                    <div class="collapse collapse-arrow border border-base-300 bg-base-200 rounded-box mb-4">
                        <input type="checkbox" class="peer" />
                        <div class="collapse-title text-xl font-medium">
                            <i class="fas fa-calendar-alt"></i> @group.Key.ToString("dd MMMM yyyy")
                        </div>
                        <div class="collapse-content">
                            <div class="overflow-x-auto">
                                <table class="table w-full">
                                    
                                    <tbody>
                                        @foreach (var activity in group)
                                        {
                                            <tr>
                                                <td>
                                                    <!-- Activity Title Dropdown -->
                                                    <div class="collapse collapse-arrow border border-base-300  rounded-box">
                                                        <input type="checkbox" class="peer" />
                                                        <div class="collapse-title text-lg font-medium">
                                                            <i class="fas fa-tasks"></i> @activity.Title
                                                        </div>
                                                        <div class="collapse-content">
                                                            <p>@activity.Description</p>
                                                            <p><strong>Operation Status:</strong> @activity.OperationState</p>
                                                            <p><strong>User:</strong> @activity.UserName</p>
                                                        </div>
                                                    </div>
                                                </td>
                                              
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <p>No activities found</p>
            }
        </div>
    </div>
</div>

@code {
    private HubConnection? hubConnection;
    private IEnumerable<IGrouping<DateTime, ActivityTrackerResponseDTO>> Activities = Enumerable.Empty<IGrouping<DateTime, ActivityTrackerResponseDTO>>();
    [CascadingParameter] public Task<AuthenticationState>? UserAuthState { get; set; }

    private async Task GetActivities()
    {
        var activities = await accountService.GroupingActivitiesAsync();
        Activities = activities; // Use the data directly
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await UserAuthState;
        if (!customAuthorizationService.CustomClaimChecker(authState.User, DefaultClaims.ManageUser))
        {
            Navigation.NavigateTo("/Account/Access-Denied");
            return; // Exit early to prevent further execution
        }

        homeGenericState.StateChanged += StateButtonClicked;
        await GetActivities();

        hubConnection = netcodeHubConnectionService.GetHubConnection();
        hubConnection.On<string>("Notify", async (clientId) =>
        {
            await CallWhenNotified();
        });

        if (hubConnection.State == HubConnectionState.Disconnected)
        {
            await hubConnection.StartAsync();
        }
    }

    private async Task CallWhenNotified()
    {
        await GetActivities(); // Refresh activities when notified
        StateHasChanged(); // Notify the UI to update
    }

    private void StateButtonClicked()
    {
        string adminOrderUrl = "app/administration/products/orders";
        if (homeGenericState.IsAdmin)
        {
            Navigation.NavigateTo($"{adminOrderUrl}/{homeGenericState.StateName}");
        }
    }
}
