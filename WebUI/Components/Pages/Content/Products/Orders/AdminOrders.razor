@page "/app/administration/products/orders"
@page "/app/administration/products/orders/{OrderStateParam}"
@rendermode InteractiveServer

@using Application.DTO.Response.Orders
@using Application.DTO.Request.Orders
@using Microsoft.AspNetCore.Components.Authorization
@using Application.Service.Products.Queries.Products
@using Application.DTO.Response.Products
@using Application.DTO.Response
@using Application.DTO.Response.Identity
@using MediatR
@using Mapster
@using Application.Service.Orders.Commands
@using Microsoft.AspNetCore.SignalR.Client
@using Blazored.Toast.Configuration
@inject IToasterService ToasterService
@inject IAccountService accountService

<PageTitle>Orders</PageTitle>

<div class="mx-auto min-h-screen bg-base-200 p-2">
    <BlazoredToasts Position="ToastPosition.TopRight" />
    <AdminHomeHeader />
      <header class="flex flex-col md:flex-row items-center justify-between gap-2 mb-4">
        <button @onclick="OpenCreateOrderModal" class="btn btn-primary">
            <i class="fas fa-plus mr-2"></i> Create Order
        </button>
        <input type="search" @oninput="SearchOrder" placeholder="Search..." class="input input-bordered" />
    </header>
      <div class="mb-4 flex justify-end gap-2">
        <button @onclick="() => NavigateToOrderDetails(SelectedOrderId)" 
                class="btn btn-success" 
                disabled="@(SelectedOrderId == Guid.Empty)">
            <i class="fas fa-eye mr-2"></i> View
        </button>
        <button @onclick="() => OpenEditOrderModal(SelectedOrderId)" 
                class="btn btn-warning" 
                disabled="@(SelectedOrderId == Guid.Empty)">
            <i class="fas fa-edit mr-2"></i> Edit
        </button>
        <button @onclick="() => OpenConfirmationModal(SelectedOrderId)" 
                class="btn btn-error" 
                disabled="@(SelectedOrderId == Guid.Empty || !CanDelete)">
            <i class="fas fa-trash-alt mr-2"></i> Cancel
        </button>
    </div>
    <div class="overflow-x-auto">
        <table class="table table-zebra w-full">
            <thead>
                <tr>
                    <th>Order </th> <!-- New column for radio button -->
                    <th>Image</th>
                    <th>Client Name</th>
                    <th>Date Ordered</th>
                    <th>Delivering Date</th>
                    <th>Product Name</th>
                    <th>Seial No</th>
                    <th>Quantity</th>
                    <th>Price</th>
                    <th>Total</th>
                    <th>State</th>
                </tr>
            </thead>
            <tbody>
                @if (TemporalOrders != null)
                {
                    @foreach (var order in TemporalOrders)
                    {
                        <tr class="hover:bg-base-200">
                            <td>
                                <input type="radio" 
                                       name="selectedOrder" 
                                       value="@order.Id" 
                                       checked="@(order.Id == SelectedOrderId)"
                                       @onchange="() => SelectOrder(order.Id)" 
                                       class="radio radio-primary" />
                            </td>
                            <td>
                              
                                    <img src="data:image/png;base64,@order.ProductImage"  class="w-16 h-16 object-cover" />
                                
                               
                            </td>
                            <td>@order.ClientName</td>
                            <td>@order.OrderedDate</td>
                              <td>@order.DeliveringDate</td>
                            <td>@order.ProductName</td>
                             <td>@order.SerialNumber</td>
                            <td>@order.Quantity</td>
                            <td>@order.Price</td>
                            <td>@order.Price * @order.Quantity</td>
                            <td>@order.State</td>

                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="11" class="text-center">No products found</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
       <div class="mt-4 flex justify-between items-center">
        <button @onclick="PreviousPage" class="btn btn-secondary" disabled="@(!HasPreviousPage)">Previous</button>
        <span>Page @CurrentPage of @TotalPages</span>
        <button @onclick="NextPage" class="btn btn-secondary" disabled="@(!HasNextPage)">Next</button>
    </div>



    <!-- Create/Edit Order Modal -->
    @if (IsOpen) // Check if this condition is met
    {
        <div class="modal modal-open">
            <div class="modal-box bg-base-200">
                <h2 class="font-bold text-lg">@OrderModalTitle</h2>
                <EditForm Model="@OrderModel" OnSubmit="SaveOrder">
                    <DataAnnotationsValidator />
                   
                  
                   
                    <div class="form-group">
                        <label for="quantity" class="label">Quantity</label>
                        <InputNumber id="quantity" class="input w-full" @bind-Value="OrderModel.Quantity" />
                    </div>
                    <div class="form-group">
                        <label for="productId" class="label">Product</label>
                        <InputSelect id="clientId" class="select select-bordered w-full" @bind-Value="OrderModel.ProductId">
                            <option value="">Select Product</option>
                            @foreach (var product in Products)
                            {
                                <option value="@product.Id">@product.Name</option>
                            }
                        </InputSelect>
                    </div>
                     <div class="form-group">
                        <label for="clientId" class="label">Client</label>
                        <InputSelect id="clientId" class="select select-bordered w-full" @bind-Value="OrderModel.ClientId">
                            <option value="">Select Client</option>
                            @foreach (var client in Clients)
                            {
                                <option value="@client.UserId">@client.Name</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="form-group mt-4 flex justify-between">
                        <button type="submit" class="btn btn-primary">Create</button>
                        <button type="button" @onclick="CloseOrderModal" class="btn btn-secondary">Cancel</button>
                    </div>
                   
                 
                </EditForm>
            </div>
        </div>
    }

    <!-- Confirmation Modal -->
     @if (IsConfirmationModalOpen)
    {
        <div class="modal modal-open">
            <div class="modal-box bg-base-200">
                <h2 class="font-bold text-lg">Confirm Order Cancellation</h2>
                <p>Are you sure you want to delete this order?</p>
                <div class="modal-action">
                    @if (Loading)
                    {
                        <button class="btn btn-danger" disabled>
                            <span class="loading loading-dots loading-sm"></span> Cancellation
                        </button>
                    }
                    else
                    {
                        <button class="btn btn-danger" @onclick="ConfirmDelete">Confirm</button>
                    }
                    <button class="btn btn-secondary" @onclick="CloseConfirmationModal">Cancel</button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    public bool Loading { get; set; } = false;
    public bool IsOpen { get; set; } = false;
    public bool IsConfirmationModalOpen { get; set; } = false;
    [CascadingParameter] public Task<AuthenticationState>? UserAuthState { get; set; }
    private IEnumerable<GetOrderResponseDTO> TemporalOrders { get; set; } = [];
    private IEnumerable<GetOrderResponseDTO> PermanentOrders { get; set; } = [];
    private UpdateClientOrderRequestDTO UpdateOrderModel { get; set; } = new();
     bool CanDelete = false;
     private GetOrderResponseDTO SelectedOrder { get; set; } = new();
    private CreateOrderRequestDTO OrderModel { get; set; } = new();
   private IEnumerable<GetProductResponseDTO> Products { get; set; } = Enumerable.Empty<GetProductResponseDTO>();

    [Parameter] public string? OrderStateParam { get; set; }
    ClaimsPrincipal? User;
    private List<string> OrderStates = new() { $"{OrderState.Processing}", $"{OrderState.Delivered}", $"{OrderState.Cancelled}" };
    private Guid SelectedOrderId { get; set; } = Guid.Empty;
    private int CurrentPage { get; set; } = 1;
    private int TotalPages { get; set; } = 1;
    private string OrderModalTitle { get; set; } = "Create Order";
    private string OrderModalButtonText { get; set; } = "Create";
    private HubConnection? hubConnection;
     private bool HasPreviousPage => CurrentPage > 1;
    private bool HasNextPage => CurrentPage < TotalPages;
        private IEnumerable<GetUserWithClaimResponseDTO> Clients = [];


    [Inject]
    private NavigationManager NavigationManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
      
        await GetUserIdentity();
         await GetUsersWithClaims();
        await GetDefaults();
      
     CanDelete = customAuthorizationService.CustomClaimChecker(User, DefaultClaims.Delete);
        hubConnection = netcodeHubConnectionService.GetHubConnection();
        hubConnection.On<string>("Notify", async (clientId) => await CallWhenNotified());
        if (hubConnection.State == HubConnectionState.Disconnected) await hubConnection.StartAsync();
    }
     private async Task GetUsersWithClaims()
    {
        try
        {
            Clients = await accountService.GetUsersWithClaimsAsync();
        }
        catch (Exception ex)
        {
            // Handle any exceptions that occur during the API call
             ToasterService.ShowError($"An unexpected error occurred. {ex.Message}");
        }
    }

    async Task CallWhenNotified()
    {
        await GetOrders();
        await InvokeAsync(async () => await adminState.GetActiveOrdersCount());
    }
       private async Task GetDefaults()
    {
        await GetProducts();
        await GetOrders();
       
    }

    private async Task GetOrders()
    {
        using var scope = serviceProvider.CreateScope();
        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
        var result = await mediator.Send(new GetAllOrdersQuery());
        TemporalOrders = result;
      
    }

    protected override void OnParametersSet()
    {
        if (string.IsNullOrEmpty(OrderStateParam) || !homeGenericState.IsAdmin)
            return;

        StateGeneralMethod();
    }

    void StateGeneralMethod()
    {
        string state = homeGenericState.StateName;
        PermanentOrders = TemporalOrders.Where(o => o.State.Equals(state, StringComparison.OrdinalIgnoreCase));
        StateHasChanged();
    }
  

    private async Task SearchOrder(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        var searchText = e.Value?.ToString();
        if (string.IsNullOrWhiteSpace(searchText))
        {
            TemporalOrders = PermanentOrders;
        }
        else
        {
            TemporalOrders = PermanentOrders.Where(o => o.ClientName.Contains(searchText, StringComparison.OrdinalIgnoreCase));
        }
        StateHasChanged();
    }

    private void OpenCreateOrderModal() // Ensure this method is executed
    {
        OrderModel = new CreateOrderRequestDTO();
        OrderModalTitle = "Create Order";
        OrderModalButtonText = "Create";
        IsOpen = true; // This should trigger the modal to open
    }

    private void CloseOrderModal()
    {
        IsOpen = false;
        UpdateOrderModel = new UpdateClientOrderRequestDTO();
    }

    private void OpenEditOrderModal(Guid orderId)
    {
        var order = PermanentOrders.FirstOrDefault(o => o.Id == orderId);
        if (order != null)
        {
            UpdateOrderModel = order.Adapt<UpdateClientOrderRequestDTO>();
            OrderModalTitle = "Edit Order";
            OrderModalButtonText = "Save";
            IsOpen = true;
        }
    }

    private void OpenConfirmationModal(Guid orderId)
    {
        SelectedOrderId = orderId;
        IsConfirmationModalOpen = true;
    }

    private void CloseConfirmationModal()
    {
        IsConfirmationModalOpen = false;
        SelectedOrderId = Guid.Empty;
    }
     async Task GetProducts()
    {
        using var scope = serviceProvider.CreateScope();
        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
        var result = await mediator.Send(new GetProductsQuery());
        Products = result;
         Console.WriteLine("Products fetched:");
   
      
    }

    private async Task ConfirmDelete()
    {
        

        Loading = true;
        using var scope = serviceProvider.CreateScope();
        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
        var response = await mediator.Send(new CancelOrderCommand(SelectedOrderId));

        if (response.Message)
        {
            ToasterService.ShowSuccess("Order cancelled successfully");
            await GetOrders();
        }
        else
        {
            ToasterService.ShowError(response.Message);
        }

        Loading = false;
        CloseConfirmationModal();
    }

    private async Task SaveOrder()
    {
        Loading = true;
        ServiceResponse response;
        try
        {
            using var scope = serviceProvider.CreateScope();
            var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();

            if (SelectedOrderId != Guid.Empty)
            {
                var update = UpdateOrderModel.Adapt<UpdateClientOrderRequestDTO>();
                update.OrderId = SelectedOrderId;
                response = await mediator.Send(new UpdateClientOrderCommand(update));
            }
            else
            {
                response = await mediator.Send(new CreateOrderCommand(OrderModel));
            }

            if (response.Flag)
            {
                await GetOrders();
                ToasterService.ShowSuccess(response.Message);
                CloseOrderModal();
            }
            else
            {
                ToasterService.ShowError(response.Message);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving order: {ex.Message}");
            ToasterService.ShowError("An error occurred while saving the order.");
        }
        finally
        {
            Loading = false;
        }
    }
    

private void SelectOrder(Guid orderId)
{
    SelectedOrderId = orderId;
    StateHasChanged();
}
    private void PreviousPage()
    {
        if (CurrentPage > 1)
        {
            CurrentPage--;
            GetOrders();
        }
    }

    private void NextPage()
    {
        if (CurrentPage < TotalPages)
        {
            CurrentPage++;
            GetOrders();
        }
    }

    private void NavigateToOrderDetails(Guid orderId)
    {
        if (orderId == Guid.Empty)
        {
            ToasterService.ShowError("No order selected");
            return;
        }

        NavigationManager.NavigateTo($"/app/administration/products/orders/details/{orderId}");
    }

    private async Task GetUserIdentity()
    {
        var authState = await UserAuthState;
        User = authState.User;
    }

    private void FilterOrders(string? state)
    {
        if (string.IsNullOrEmpty(state))
        {
            TemporalOrders = PermanentOrders;
        }
        else
        {
            TemporalOrders = PermanentOrders.Where(o => o.State.Equals(state, StringComparison.OrdinalIgnoreCase));
        }
        StateHasChanged();
    }
}
