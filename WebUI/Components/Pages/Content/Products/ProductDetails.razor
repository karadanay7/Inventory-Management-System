@page "/app/products/details/{ProductId:guid}"
@rendermode InteractiveServer
@using Application.DTO.Response.Products
@using Application.Service.Products.Queries.Products
@using MediatR

@attribute [Authorize(Policy = "AdministrationPolicy")]
<PageTitle>Product Details - Inventory Management</PageTitle>
<AdminHomeHeader />

<div class="mx-auto p-4 min-h-screen ">
    @if (Product != null)
    {
        <div class=" shadow-lg rounded-lg overflow-hidden mb-8">
            <div class="p-6">
                <div class="flex justify-between items-center mb-6">
                    <h1 class="text-3xl font-bold text-gray-800">@Product.Name</h1>
                    <button class="btn btn-primary" @onclick="GoBack">Back to Products</button>
                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
                    <div class="flex justify-center items-center bg-gray-200 rounded-lg overflow-hidden" style="height: 400px;">
                        @if (!string.IsNullOrEmpty(Product.Base64Image))
                        {
                            <img src="data:image/png;base64,@Product.Base64Image" alt="@Product.Name" class="object-contain h-full w-full" />
                        }
                        else
                        {
                            <span class="text-gray-500 text-xl">No image available</span>
                        }
                    </div>
                    <div class="space-y-4">
                        <div class="bg-blue-100 p-4 rounded-lg">
                            <h2 class="text-xl font-semibold text-blue-800 mb-2">Product Information</h2>
                            <p><span class="font-medium">ID:</span> @Product.Id</p>
                            <p><span class="font-medium">Serial Number:</span> @Product.SerialNumber</p>
                            <p><span class="font-medium">Price:</span> @Product.Price.ToString("C")</p>
                            <p><span class="font-medium">Quantity:</span> @Product.Quantity</p>
                        </div>
                        <div class="bg-green-100 p-4 rounded-lg">
                            <h2 class="text-xl font-semibold text-green-800 mb-2">Category & Location</h2>
                            <p><span class="font-medium">Category:</span> @Product.Category.Name</p>
                            <p><span class="font-medium">Location:</span> @Product.Location.Name</p>
                        </div>
                        <div class="bg-yellow-100 p-4 rounded-lg">
                            <h2 class="text-xl font-semibold text-yellow-800 mb-2">Additional Details</h2>
                            <p><span class="font-medium">Date Added:</span> @Product.DateAdded.ToString("MM/dd/yyyy")</p>
                            <p><span class="font-medium">Description:</span> @Product.Description</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
       
    }
    else
    {
        <div class="flex justify-center items-center h-64">
            <div class="animate-spin rounded-full h-32 w-32 border-t-2 border-b-2 border-blue-500"></div>
        </div>
    }
</div>

@code {
    [Parameter]
    public Guid ProductId { get; set; }

    private GetProductResponseDTO Product { get; set; }

    [Inject]
    private NavigationManager NavigationManager { get; set; }

    [Inject]
    private IMediator Mediator { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadProductDetails();
    }

    private async Task LoadProductDetails()
    {
        var query = new GetProductByIdQuery(ProductId);
        Product = await Mediator.Send(query);
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/app/products/manage");
    }
}