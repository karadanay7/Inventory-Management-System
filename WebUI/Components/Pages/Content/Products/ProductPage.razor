@page "/app/products/manage"
@rendermode InteractiveServer
@attribute [Authorize(Policy = "AdministrationPolicy")]
@using Application.DTO.Request
@using Application.DTO.Request.Products
@using Application.DTO.Response
@using Application.DTO.Response.Products
@using Application.Service.Products.Queries.Categories
@using Application.Service.Products.Queries.Locations
@using Application.Service.Products.Queries.Products
@using Mapster
@using MediatR
@using NetcodeHub.Packages.Components.FileUpload

<PageTitle>Products</PageTitle>


<div>
    <div>
        <AdminHomeHeader />
       <button>Create Product</button>
<input type="search"/>
 <SfGrid DataSource="@PermanentProducts" AllowPaging="true" AllowSorting="true" AllowExcelExport="true" style="margin-top:35px;"  AllowGrouping=true AllowPdfExport="true" Toolbar="Toolbaritems" AllowSelection="true"
 AllowResizing=true @ref="DefaultGrid">
 <GridPageSettings PageSize="5"></GridPageSettings>
 <GridSelectionSettings Type="SelectionType.Single" Mode="SelectionMode.Both"></GridSelectionSettings>
 <GridEvents OnToolbarClick="ToolbarClickHandler" TValue="GetProductResponseDTO" RowSelected="RowSelectHandler"></GridEvents>
 <GridColumns>
    <GridColumn HeaderText="Image" AllowFiltering=false>
     <Template>
        @{
            var product = (context as GetProductResponseDTO);
            <div class="image">
                <img src="@(product!.Base64Image)" alt="@product.Name">

            </div>
        }
     </Template>
    </GridColumn>
    <GridColumn Field="@nameof(GetProductResponseDTO.DateAdded)" HeaderText="Date Added" ></GridColumn>
    <GridColumn Field="@nameof(GetProductResponseDTO.Id)" HeaderText="ID" ></GridColumn>
    <GridColumn Field="@nameof(GetProductResponseDTO.Name)" HeaderText="Name" ></GridColumn>
    <GridColumn Field="@nameof(GetProductResponseDTO.SerialNumber)" HeaderText="Serial Number" ></GridColumn>
    <GridColumn Field="@nameof(GetProductResponseDTO.Price)" HeaderText="Price" ></GridColumn>
    <GridColumn Field="@nameof(GetProductResponseDTO.Quantity)" HeaderText="Quantity" ></GridColumn>
    <GridColumn HeaderText="Category" AllowFiltering=false>
        <Template>
            @{
                var product = (context as GetProductResponseDTO);
                <div class="category">
                    <span>@product!.Category.Name</span>
                </div>
            }
        </Template>
    </GridColumn>
    <GridColumn HeaderText="Location" AllowFiltering=false>
        <Template>
            @{
                var product = (context as GetProductResponseDTO);
                <div class="location">
                    <span>@product!.Location.Name</span>
                </div>
            }
        </Template>
    </GridColumn>
    <GridColumn Field="@nameof(GetProductResponseDTO.Description)" HeaderText="Description" ></GridColumn>
 </GridColumns>
 </SfGrid>

    </div>
    <NetcodeHubModal @bind-Open="IsOpen" CustomStyle="@ModalCustomStyle">
      <div class="content"> 
        @if(ShowProductPage)
        {

        }
        @if(ShowConfirmationPage)
        {
            <div class="card">
                <div class="card-header">
                     <i></i>
                <span>Confirm product deletion</span>
                </div>
                <div class="card-body">
                    <p>Are you sure you want to delete this product?</p>

                </div>
                <div class="footer">
                    @if(Loading)
                    {
                        <WebUI.Components.Pages.General.GenericSpinnerButton ButtonClass="btn btn-danger" >Deleting</WebUI.Components.Pages.General.GenericSpinnerButton>
                    }
                    else
                    {
                        <button class="btn btn-danger" @onclick="ConfirmDelete">Confirm</button>
                    }
                </div>
               

            </div>
        }

      </div>
    </NetcodeHubModal>
       
</div>
@code {
    private string ModalCustomStyle = string.Empty;
    string ModalTitle = "New Product";
    private SfGrid<GetProductResponseDTO> DefaultGrid;
        private Dictionary<string, string> BreadCrumbs = new Dictionary<string, string>
            {
                { "Home", "/app/home" },
                { "Products", null! }
            };
            
    string Search = string.Empty;
    List<string> RequiredEx = [".png", ".jpg", ".jpeg"];
        string Errors = "";
        private bool ShowProductPage ;
        private bool ShowConfirmationPage ;
        public bool Loading { get; set; }=false;
        private bool IsOpen { get; set; }
        public int Duration { get; set; } 

        private List<ItemModel> Toolbaritems = new List<ItemModel>();
            [CascadingParameter] public Task<AuthenticationState>? UserAuthState { get; set; }
                private IEnumerable<GetProductResponseDTO> Products { get; set; }=[];
                private IEnumerable<GetProductResponseDTO> PermanentProducts { get; set; }=[];
                private IEnumerable<GetCategoryResponseDTO> Categories { get; set; }=[];
                private IEnumerable<GetLocationResponseDTO> Locations { get; set; }=[];
                    private AddProductRequestDTO ProductModel { get; set; } = new ();
                    ClaimsPrincipal? User;
                    private HubConnection? hubConnection;
                    bool CanDelete = false;
                    protected async override Task OnInitializedAsync()
                    {
                      User = (await UserAuthState!).User;
                      CanDelete = customAuthorizationService.CustomClaimChecker(User, DefaultClaims.Delete);
                      homeGenericState.StateChanged += StateButtonClicked;
                      await LoadToolbarItems();
                      hubConnection = netcodeHubConnectionService.GetHubConnection();
                        hubConnection.On<string>("Notify", async (clientId) =>
                        {
                            await CallWhenNotified();
                        });
                        if (hubConnection.State == HubConnectionState.Disconnected)
                        {
                            await hubConnection.StartAsync();
                        }
                    }
                    
    private async Task CallWhenNotified()
    {
       await InvokeAsync(async () =>
       {
          StateHasChanged();
          await adminState.GetActiveOrdersCount();
       });
    }

     private void StateButtonClicked()
    {
        string adminOrderUrl = "app/administration/products/orders";
        if (homeGenericState.IsAdmin)
        {
            Navigation.NavigateTo($"{adminOrderUrl}/{homeGenericState.StateName}");
        }
    }
    private async Task GetDefaults()
    {
        await GetProducts();
        await GetCategories();
        await GetLocations();
    }
    async Task GetCategories()
    {
       using var scope = serviceProvider.CreateScope();
       var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
        var result = await mediator.Send(new GetAllCategoriesQuery());
        Categories = result;

    }
    async Task GetLocations()
    {
       using var scope = serviceProvider.CreateScope();
       var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
        var result = await mediator.Send(new GetAllLocationsQuery());
        Locations = result;

    }
    async Task GetProducts()
    {
       using var scope = serviceProvider.CreateScope();
       var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
        var result = await mediator.Send(new GetProductsQuery());
        Products = result;
        PermanentProducts = Products;
    }
   async Task LoadToolbarItems()
{
    if (CanDelete)
    {
        Toolbaritems.Add(new ItemModel() { TooltipText = "Delete Product", Text = "Delete", Id = "Delete", PrefixIcon = "e-icons e-delete" });
    }
    Toolbaritems.Add(new ItemModel() { TooltipText = "View Product", Text = "View", Id = "View", PrefixIcon = "e-icons e-view" });
    Toolbaritems.Add(new ItemModel() { TooltipText = "Edit Product", Text = "Edit", Id = "Edit", PrefixIcon = "e-icons e-edit" });
    Toolbaritems.Add(new ItemModel() { TooltipText = "Export to Pdf", Text = "PDF", Id = "Pdf", PrefixIcon = "e-icons e-pdf" });
    Toolbaritems.Add(new ItemModel() { TooltipText = "Export to Excel", Text = "Excel", Id = "Excel", PrefixIcon = "e-icons e-excel" });
    Toolbaritems.Add(new ItemModel() { TooltipText = "Print", Text = "Print", Id = "Print", PrefixIcon = "e-icons e-print" });

    await Task.CompletedTask; // If there are no asynchronous operations, you can return a completed task.
}

    void OpenModal()
    {
        IsOpen = true;
    }
   private Guid IdHolder { get; set; } = Guid.Empty;
   async Task SaveProduct()
   {
    Loading = true;
    await Task.Delay(2000);
    ServiceResponse response = new (false, null);
    if(IdHolder != Guid.Empty)
    {
       var update =ProductModel.Adapt(new UpdateProductRequestDTO()) ;
       update.Id = IdHolder;
       using var scope = serviceProvider.CreateScope();
       var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
         response = await mediator.Send(new UpdateProductCommand(update));
         await accountService.SaveActivityAsync(new ActivityTrackerRequestDTO()
         {
            UserId = User!.Claims.FirstOrDefault(x => x.Type == ClaimTypes.NameIdentifier)?.Value,
            Title = "Update Product Method Called",
            Description = response.Message,
            OperationState = response.Flag,
            Date = DateTime.UtcNow.Date

         });
         Loading = false;
         StateHasChanged();
    }
    else
    {
       using var scope = serviceProvider.CreateScope();
         var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
            response = await mediator.Send(new CreateProductCommand(ProductModel));
            await accountService.SaveActivityAsync(new ActivityTrackerRequestDTO()
            {
                UserId = User!.Claims.FirstOrDefault(x => x.Type == ClaimTypes.NameIdentifier)?.Value,
                Title = "Create Product Method Called",
                Description = response.Message,
                OperationState = response.Flag,
                Date = DateTime.UtcNow.Date

            });
            Loading = false;
            StateHasChanged();
    }
    if(response.Flag)
    {
       
       await GetProducts();
       PermanentProducts = Products;
              ToasterService.ShowSuccess("User Created Successfully");
              ProductModel = new();
              SelectedProduct = new();
    }
    else
    {
       ToasterService.ShowError(response.Message);
    }
   }
   void RetrieveContent(FileModel? incomingFiles)
   {
       if(incomingFiles is null) return;
       foreach(var file in incomingFiles!.IBrowserFiles!)
       {
        var getFileNameAndBase64 = incomingFiles.BaseFiles!.FirstOrDefault(x => x.Key.Equals(file.Name));
        if (getFileNameAndBase64.Value is not null)
        
            ProductModel.Base64Image = getFileNameAndBase64.Value;
        
       }


   }
   void CategorySelectionChanged(Microsoft.AspNetCore.Components.ChangeEventArgs e) => ProductModel.CategoryId = Guid.Parse(e.Value.ToString());
    void LocationSelectionChanged(Microsoft.AspNetCore.Components.ChangeEventArgs e) => ProductModel.LocationId = Guid.Parse(e.Value.ToString());
    async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
       
       if(args.Item.Text.ToLower()=="excel")
       await this.DefaultGrid.ExportToExcelAsync();
        else  if(args.Item.Text.ToLower()=="pdf")
         await this.DefaultGrid.ExportToPdfAsync();
        else  if(args.Item.Text.ToLower()=="print")
        await this.DefaultGrid.Print();
        else  if(args.Item.Text.ToLower()=="view")
        {
            bool check= await CheckIfRowSelected();
            if (check) Navigation.NavigateTo($"/app/products/details/{SelectedProduct.Id.ToString()}");
        }
        else if (args.Item.Text.ToLower()=="add")
        {
            ProductModel = new();
            OpenModal();

          }
        else if (args.Item.Text.ToLower()=="edit")
        {
            bool check= await CheckIfRowSelected();
            if (check)
            {
               
               ResetModalDisplay();
                 ModalCustomStyle ="position:relative; left:45vw; top:10vh; min-width:250px;";
                ModalTitle = "Edit Product";
                SelectedProduct.Adapt(ProductModel);
                IdHolder = SelectedProduct.Id;
                ShowProductPage = true;
                OpenModal();
            }
        }
        else if (args.Item.Text.ToLower()=="delete")
        {
            if (await CheckIfRowSelected())
            {
              ResetModalDisplay();
              ModalCustomStyle ="position:relative; left:40vw; top:45vh;";
                ShowConfirmationPage = true;
                OpenModal();
            }
        }
     
        
    }
        private void ResetModalDisplay()
    {
        ModalCustomStyle = string.Empty;
        ShowProductPage = false;
        ShowConfirmationPage = false;
    }

    async Task ConfirmDelete()
    {
        Loading = true;
        await Task.Delay(2000);
        using var scope = serviceProvider.CreateScope();
        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
        var response = await mediator.Send(new DeleteProductCommand(SelectedProduct.Id));
        await accountService.SaveActivityAsync(new ActivityTrackerRequestDTO()
        {
            UserId = User!.Claims.FirstOrDefault(x => x.Type == ClaimTypes.NameIdentifier)?.Value,
            Title = "Delete Product Method Called",
            Description = response.Message,
            OperationState = response.Flag,
            Date = DateTime.UtcNow.Date

        });
        if(response.Flag)
        {
            await GetProducts();
            PermanentProducts = Products;
            ToasterService.ShowSuccess("Product Deleted Successfully");
           SelectedProduct = new();
           CloseModal();
        }
        else
        {
            ToasterService.ShowError(response.Message);
        }
        Loading = false;
    }
    async Task<bool> CheckIfRowSelected()
{
    if (SelectedProduct.Id == Guid.Empty)
    {
        ToasterService.ShowWarning("Please select a product.");
        return false;
    }
    return true;
}
  private async Task RowSelectHandler(RowSelectEventArgs<GetProductResponseDTO> args)
    {
        if (args.Data != null)
        {
            SelectedProduct = args.Data;
        }
    }
void CloseModal()
{
    IsOpen = false;
    ShowProductPage = false;
    ShowConfirmationPage = false;
}


    private GetProductResponseDTO SelectedProduct= new();
    public void RowSelecHandler(RowSelectEventArgs<GetProductResponseDTO> args) => SelectedProduct = args.Data;
        void SearchProduct(Microsoft.AspNetCore.Components.ChangeEventArgs e)
        {
           try{
            string trimFilter = e.Value.ToString().Trim();
            if (string.IsNullOrEmpty(trimFilter))
            {
                Products = PermanentProducts;
            }
            else
            {
                Products = PermanentProducts.Where(x => x.Name.ToLower().Contains(trimFilter.ToLower()) || x.SerialNumber.ToLower().Contains(trimFilter.ToLower()));
            }
            }
            catch(Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
   

}
                    



       


      

  