@page "/app/products/manage"
@attribute [Authorize(Policy = "AdministrationPolicy")]
@using Application.DTO.Request
@using Application.DTO.Request.Products
@using Application.DTO.Response
@using Application.DTO.Response.Products
@using Application.Service.Products.Queries.Products
@using Mapster
@using MediatR

<PageTitle>Products</PageTitle>

<div class="container mx-auto p-4">
    <header class="flex justify-between items-center mb-4">
        <AdminHomeHeader />
        <button @onclick="OpenModal" class="btn btn-primary">Create Product</button>
        <input type="search" @oninput="SearchProduct" class="input input-bordered" placeholder="Search..." />
    </header>

    <div class="overflow-x-auto">
        <table class="table-auto w-full border-collapse border border-gray-200">
            <thead class="bg-gray-100">
                <tr>
                    <th class="border border-gray-300 p-2">Image</th>
                    <th class="border border-gray-300 p-2">Date Added</th>
                    <th class="border border-gray-300 p-2">ID</th>
                    <th class="border border-gray-300 p-2">Name</th>
                    <th class="border border-gray-300 p-2">Serial Number</th>
                    <th class="border border-gray-300 p-2">Price</th>
                    <th class="border border-gray-300 p-2">Quantity</th>
                    <th class="border border-gray-300 p-2">Category</th>
                    <th class="border border-gray-300 p-2">Location</th>
                    <th class="border border-gray-300 p-2">Description</th>
                </tr>
            </thead>
            <tbody>
                @if (Products.Any())
                {
                    @foreach (var product in Products)
                    {
                        <tr @onclick="() => SelectProduct(product)" class="cursor-pointer hover:bg-gray-100">
                            <td class="border border-gray-300 p-2">
                                <img src="@(product.Base64Image)" alt="@product.Name" class="w-16 h-16 object-cover" />
                            </td>
                            <td class="border border-gray-300 p-2">@product.DateAdded.ToShortDateString()</td>
                            <td class="border border-gray-300 p-2">@product.Id</td>
                            <td class="border border-gray-300 p-2">@product.Name</td>
                            <td class="border border-gray-300 p-2">@product.SerialNumber</td>
                            <td class="border border-gray-300 p-2">@product.Price.ToString("C")</td>
                            <td class="border border-gray-300 p-2">@product.Quantity</td>
                            <td class="border border-gray-300 p-2">@product.Category.Name</td>
                            <td class="border border-gray-300 p-2">@product.Location.Name</td>
                            <td class="border border-gray-300 p-2">@product.Description</td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="10" class="border border-gray-300 p-2 text-center">No products found</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="flex justify-between items-center mt-4">
        <div>
            <button @onclick="PreviousPage" class="btn btn-secondary" disabled="@(!CanPreviousPage)">Previous</button>
            <button @onclick="NextPage" class="btn btn-secondary" disabled="@(!CanNextPage)">Next</button>
        </div>
        <div>
            Page @CurrentPage of @TotalPages
        </div>
    </div>

    <!-- Modal Background -->
    <input type="checkbox" id="my-modal" class="modal-toggle" @bind="IsOpen" />
    <label for="my-modal" class="modal cursor-pointer">
        <label class="modal-box relative" for="my-modal" style="@ModalCustomStyle">
            <div>
                @if (ShowProductPage)
                {
                    <!-- Content for Product Page -->
                }
                @if (ShowConfirmationPage)
                {
                    <div class="card">
                        <div class="card-header">
                            <i class="icon icon-warning"></i>
                            <span>Confirm product deletion</span>
                        </div>
                        <div class="card-body">
                            <p>Are you sure you want to delete this product?</p>
                        </div>
                        <div class="card-footer">
                            @if (Loading)
                            {
                                <button class="btn btn-danger" disabled>Deleting...</button>
                            }
                            else
                            {
                                <button class="btn btn-danger" @onclick="ConfirmDelete">Confirm</button>
                            }
                        </div>
                    </div>
                }
            </div>
        </label>
    </label>
</div>

@code {
    private string ModalCustomStyle = string.Empty;
    private string ModalTitle = "New Product";
    private bool ShowProductPage;
    private bool ShowConfirmationPage;
    public bool Loading { get; set; } = false;
    private bool IsOpen { get; set; }
    private int CurrentPage { get; set; } = 1;
    private int TotalPages { get; set; }
    private int ItemsPerPage { get; set; } = 5;
    private bool CanNextPage => CurrentPage < TotalPages;
    private bool CanPreviousPage => CurrentPage > 1;

    private IEnumerable<GetProductResponseDTO> Products { get; set; } = Enumerable.Empty<GetProductResponseDTO>();
    private IEnumerable<GetProductResponseDTO> PermanentProducts { get; set; } = Enumerable.Empty<GetProductResponseDTO>();
    private GetProductResponseDTO SelectedProduct = new();

    protected async override Task OnInitializedAsync()
    {
        await GetProducts();
    }

    async Task GetProducts()
    {
        using var scope = serviceProvider.CreateScope();
        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
        var result = await mediator.Send(new GetProductsQuery());
        PermanentProducts = result;
        Products = PermanentProducts.Skip((CurrentPage - 1) * ItemsPerPage).Take(ItemsPerPage);
        TotalPages = (int)Math.Ceiling(PermanentProducts.Count() / (double)ItemsPerPage);
    }

    void OpenModal()
    {
        IsOpen = true;
    }

    private async Task ConfirmDelete()
    {
        Loading = true;
        await Task.Delay(2000);
        using var scope = serviceProvider.CreateScope();
        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
        var response = await mediator.Send(new DeleteProductCommand(SelectedProduct.Id));
        if (response.Flag)
        {
            await GetProducts();
            ToasterService.ShowSuccess("Product Deleted Successfully");
            SelectedProduct = new();
            CloseModal();
        }
        else
        {
            ToasterService.ShowError(response.Message);
        }
        Loading = false;
    }

    void CloseModal()
    {
        IsOpen = false;
        ShowProductPage = false;
        ShowConfirmationPage = false;
    }

    void SearchProduct(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        var trimFilter = e.Value.ToString().Trim();
        if (string.IsNullOrEmpty(trimFilter))
        {
            Products = PermanentProducts.Skip((CurrentPage - 1) * ItemsPerPage).Take(ItemsPerPage);
        }
        else
        {
            Products = PermanentProducts.Where(x => x.Name.Contains(trimFilter, StringComparison.OrdinalIgnoreCase) || x.SerialNumber.Contains(trimFilter, StringComparison.OrdinalIgnoreCase))
                                         .Skip((CurrentPage - 1) * ItemsPerPage).Take(ItemsPerPage);
        }
        TotalPages = (int)Math.Ceiling(Products.Count() / (double)ItemsPerPage);
    }

    private void SelectProduct(GetProductResponseDTO product)
    {
        SelectedProduct = product;
        // Implement selection logic
    }

    private async Task NextPage()
    {
        if (CanNextPage)
        {
            CurrentPage++;
            await GetProducts();
        }
    }

    private async Task PreviousPage()
    {
        if (CanPreviousPage)
        {
            CurrentPage--;
            await GetProducts();
        }
    }
}

