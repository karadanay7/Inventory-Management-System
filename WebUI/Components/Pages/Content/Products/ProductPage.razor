@page "/app/products/manage"
@rendermode InteractiveServer
@attribute [Authorize(Policy = "AdministrationPolicy")]
@using Application.DTO.Request
@using Application.DTO.Request.Products
@using Application.DTO.Response
@using Application.DTO.Response.Products
@using Application.Service.Products.Queries.Categories
@using Application.Service.Products.Queries.Locations
@using Application.Service.Products.Queries.Products
@using Mapster
@using MediatR
@using Microsoft.AspNetCore.Components.Forms
@using System.Net.Http.Headers
@using System.Net.Http.Json
@using Blazored.Toast.Configuration

<PageTitle>Products</PageTitle>
<BlazoredToasts Position="ToastPosition.BottomRight" />

<div class=" mx-auto min-h-screen bg-base-200 p-2">
    <header class=" flex flex-col md:flex-row  items-center justify-between  gap-2">
    
        <button @onclick="OpenCreateProductModal" class="btn btn-primary">Create Product</button>
        <input type="search" @oninput="SearchProduct" placeholder="Search..." class="input  input-bordered " />
    </header>

    <div class="overflow-x-auto ">
        <table class="table table-zebra w-full">
            <thead>
                <tr>
                    <th>Image</th>
                    <th>Date Added</th>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Serial Number</th>
                    <th>Price</th>
                    <th>Quantity</th>
                    <th>Category</th>
                    <th>Location</th>
                    <th>Description</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (Products != null)
                {
                    @foreach (var product in Products)
                    {
                        <tr>
                            <td>
                                @if (!string.IsNullOrEmpty(product.Base64Image))
                                {
                                    <img src="data:image/png;base64,@product.Base64Image" alt="@product.Name" class="w-16 h-16 object-cover" />
                                }
                                else
                                {
                                    <span>No image</span>
                                }
                            </td>
                            <td>@product.DateAdded.ToString("MM/dd/yyyy")</td>
                            <td>@product.Id</td>
                            <td>@product.Name</td>
                            <td>@product.SerialNumber</td>
                            <td>@product.Price</td>
                            <td>@product.Quantity</td>
                            <td>@product.Category.Name</td>
                            <td>@product.Location.Name</td>
                            <td>@product.Description</td>
                            <td>
                                <div class="flex space-x-2">
                                    <button @onclick="() => OpenEditProductModal(product)" class="btn btn-sm btn-warning">✏️</button>
                                    <button @onclick="() => OpenConfirmationModal(product.Id)" class="btn btn-sm btn-danger">🗑️</button>
                                </div>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="11" class="text-center">No products found</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="mt-4 flex justify-between items-center">
        <button @onclick="PreviousPage" class="btn btn-secondary" disabled="@(!HasPreviousPage)">Previous</button>
        <span>Page @CurrentPage of @TotalPages</span>
        <button @onclick="NextPage" class="btn btn-secondary" disabled="@(!HasNextPage)">Next</button>
    </div>

    @if (IsProductModalOpen)
    {
        <div class="modal modal-open">
            <div class="modal-box bg-base-200">
                <h2 class="font-bold text-lg">@ProductModalTitle</h2>
                <EditForm Model="@ProductModel" OnValidSubmit="SaveProduct">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-group">
                        <label for="name" class="label">Name</label>
                        <InputText id="name" class="input w-full" @bind-Value="ProductModel.Name" />
                    </div>
                    <div class="form-group">
                        <label for="serialNumber" class="label">Serial Number</label>
                        <InputText id="serialNumber" class="input w-full" @bind-Value="ProductModel.SerialNumber" />
                    </div>
                    <div class="form-group">
                        <label for="price" class="label">Price</label>
                        <InputNumber id="price" class="input w-full" @bind-Value="ProductModel.Price" />
                    </div>
                    <div class="form-group">
                        <label for="quantity" class="label">Quantity</label>
                        <InputNumber id="quantity" class="input w-full" @bind-Value="ProductModel.Quantity" />
                    </div>
                    <div class="form-group">
                        <label for="categoryId" class="label">Category</label>
                        <InputSelect id="categoryId" class="select select-bordered w-full" @bind-Value="ProductModel.CategoryId">
                            <option value="">Select Category</option>
                            @foreach (var category in Categories)
                            {
                                <option value="@category.Id">@category.Name</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="form-group">
                        <label for="locationId" class="label">Location</label>
                        <InputSelect id="locationId" class="select select-bordered w-full" @bind-Value="ProductModel.LocationId">
                            <option value="">Select Location</option>
                            @foreach (var location in Locations)
                            {
                                <option value="@location.Id">@location.Name</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="form-group">
                        <label for="description" class="label">Description</label>
                        <InputTextArea id="description" class="textarea w-full" @bind-Value="ProductModel.Description" />
                    </div>
                    <div class="form-group">
                        <label for="image" class="label">Image</label>
                        <InputFile id="image" class="file-input w-full" OnChange="HandleFileUpload" />
                    </div>
                    <div class="form-group mt-4">
                        <button type="submit" class="btn btn-primary">@ProductModalButtonText</button>
                        <button type="button" @onclick="CloseProductModal" class="btn btn-secondary ml-2">Cancel</button>
                    </div>
                </EditForm>
            </div>
        </div>
    }

    @if (IsConfirmationModalOpen)
    {
        <div class="modal modal-open">
            <div class="modal-box bg-base-200">
                <h2 class="font-bold text-lg">Confirm Product Deletion</h2>
                <p>Are you sure you want to delete this product?</p>
                <div class="modal-action">
                    @if (Loading)
                    {
                        <button class="btn btn-danger" disabled>
                            <span class="loading loading-dots loading-sm"></span> Deleting
                        </button>
                    }
                    else
                    {
                        <button class="btn btn-danger" @onclick="ConfirmDelete">Confirm</button>
                    }
                    <button class="btn btn-secondary" @onclick="CloseConfirmationModal">Cancel</button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private string ModalCustomStyle = string.Empty;
    public bool Loading { get; set; } = false;
    private bool IsProductModalOpen { get; set; } = false;
    private string ProductModalTitle { get; set; } = "Create Product";
    private string ProductModalButtonText { get; set; } = "Create";
    public int Duration { get; set; }

    private List<ItemModel> Toolbaritems = new List<ItemModel>();
    [CascadingParameter] public Task<AuthenticationState>? UserAuthState { get; set; }
    private IEnumerable<GetProductResponseDTO> Products { get; set; } = Enumerable.Empty<GetProductResponseDTO>();
    private IEnumerable<GetProductResponseDTO> PermanentProducts { get; set; } = Enumerable.Empty<GetProductResponseDTO>();
    private IEnumerable<GetCategoryResponseDTO> Categories { get; set; } = Enumerable.Empty<GetCategoryResponseDTO>();
    private IEnumerable<GetLocationResponseDTO> Locations { get; set; } = Enumerable.Empty<GetLocationResponseDTO>();
    private AddProductRequestDTO ProductModel { get; set; } = new();
    private GetProductResponseDTO SelectedProduct { get; set; } = new();

    private bool HasPreviousPage => CurrentPage > 1;
    private bool HasNextPage => CurrentPage < TotalPages;
    private int CurrentPage { get; set; } = 1;
    private int TotalPages { get; set; } = 1;
    private Guid IdHolder { get; set; } = Guid.Empty;
    private bool IsConfirmationModalOpen { get; set; } = false;
    private ClaimsPrincipal? User;
    private HubConnection? hubConnection;
    bool CanDelete = false;
    

    protected async override Task OnInitializedAsync()
    {
        User = (await UserAuthState!).User;
        CanDelete = customAuthorizationService.CustomClaimChecker(User, DefaultClaims.Delete);
        homeGenericState.StateChanged += StateButtonClicked;
        await LoadToolbarItems();
        hubConnection = netcodeHubConnectionService.GetHubConnection();
        hubConnection.On<string>("Notify", async (clientId) =>
        {
            await CallWhenNotified();
        });
        if (hubConnection.State == HubConnectionState.Disconnected)
        {
            await hubConnection.StartAsync();
        }
        await GetDefaults();
    }

    private async Task CallWhenNotified()
    {
        await InvokeAsync(async () =>
        {
            StateHasChanged();
            await adminState.GetActiveOrdersCount();
        });
    }

    private async Task GetDefaults()
    {
        await GetProducts();
        await GetCategories();
        await GetLocations();
    }

    private async Task GetCategories()
    {
        using var scope = serviceProvider.CreateScope();
        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
        Categories = await mediator.Send(new GetAllCategoriesQuery());
    }

    private async Task GetLocations()
    {
        using var scope = serviceProvider.CreateScope();
        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
        Locations = await mediator.Send(new GetAllLocationsQuery());
    }

    async Task GetProducts()
    {
        using var scope = serviceProvider.CreateScope();
        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
        var result = await mediator.Send(new GetProductsQuery());
        Products = result;
        PermanentProducts = Products;
    }

    private async Task SearchProduct(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        var searchText = e.Value?.ToString();
        if (string.IsNullOrWhiteSpace(searchText))
        {
            Products = PermanentProducts;
        }
        else
        {
            Products = PermanentProducts.Where(p => p.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase));
        }
        StateHasChanged();
    }

    private void OpenCreateProductModal()
    {
        ProductModel = new AddProductRequestDTO();
        ProductModalTitle = "Create Product";
        ProductModalButtonText = "Create";
        IsProductModalOpen = true;
    }

    private void CloseProductModal()
    {
        IsProductModalOpen = false;
        ProductModel = new AddProductRequestDTO();
        IdHolder = Guid.Empty;
    }

    private void OpenEditProductModal(GetProductResponseDTO product)
    {
        ProductModel = product.Adapt<AddProductRequestDTO>();
        IdHolder = product.Id;
        ProductModalTitle = "Edit Product";
        ProductModalButtonText = "Save";
        IsProductModalOpen = true;
    }

    private void OpenConfirmationModal(Guid productId)
    {
        IdHolder = productId;
        IsConfirmationModalOpen = true;
    }

    private void CloseConfirmationModal()
    {
        IsConfirmationModalOpen = false;
        IdHolder = Guid.Empty;
    }

    private async Task ConfirmDelete()
    {
        if (IdHolder == Guid.Empty) return;

        Loading = true;
        using var scope = serviceProvider.CreateScope();
        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
        var response = await mediator.Send(new DeleteProductCommand(IdHolder));

        await accountService.SaveActivityAsync(new ActivityTrackerRequestDTO
        {
            UserId = User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value,
            Title = "Delete Product method called",
            Description = response.Message,
            OperationState = response.Flag,
            Date = DateTime.UtcNow.Date
        });

        if (response.Flag)
        {
            ToasterService.ShowSuccess("Product deleted successfully");
            await GetProducts();
        }
        else
        {
            ToasterService.ShowError(response.Message);
        }

        Loading = false;
        CloseConfirmationModal();
    }

    private async Task SaveProduct()
    {
        Loading = true;
        ServiceResponse response;
        using var scope = serviceProvider.CreateScope();
        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();

        if (IdHolder != Guid.Empty)
        {
            var update = ProductModel.Adapt<UpdateProductRequestDTO>();
            update.Id = IdHolder;
            response = await mediator.Send(new UpdateProductCommand(update));
        }
        else
        {
            response = await mediator.Send(new CreateProductCommand(ProductModel));
        }

        if (response.Flag)
        {
            await GetProducts();
            ToasterService.ShowSuccess(response.Message);
            CloseProductModal();
        }
        else
        {
            ToasterService.ShowError(response.Message);
        }

        Loading = false;
        
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            var buffer = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffer);
            ProductModel.Base64Image = Convert.ToBase64String(buffer);
        }
    }



    private async Task LoadToolbarItems()
    {
        // Load toolbar items logic
    }
    void StateButtonClicked()
    {
        string adminOrderUrl = "app/administration/products/orders";
        if (homeGenericState.IsAdmin)
        {
            Navigation.NavigateTo($"{adminOrderUrl}/{homeGenericState.StateName}");
        }
    }

    private void PreviousPage()
    {
        if (CurrentPage > 1)
        {
            CurrentPage--;
            GetProducts();
        }
    }

    private void NextPage()
    {
        if (CurrentPage < TotalPages)
        {
            CurrentPage++;
            GetProducts();
        }
    }
}
