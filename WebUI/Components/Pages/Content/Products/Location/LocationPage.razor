@page "/app/products/location/manage"
@rendermode InteractiveServer
@attribute [Authorize(Policy = "AdministrationPolicy")]
@using Application.DTO.Request
@using Application.DTO.Response
@using Application.DTO.Response.Products
@using Application.DTO.Request.Products
@using Application.Service.Products.Queries.Locations
@using Blazored.Toast.Configuration
@using Mapster
@using MediatR
@using Microsoft.AspNetCore.Components.Forms
@using System.Security.Claims

<PageTitle>Locations</PageTitle>
<BlazoredToasts Position="ToastPosition.BottomRight" />

<div class="mx-auto min-h-screen bg-base-200">
    <header class="flex justify-between items-center mb-4">
        <button @onclick="OpenCreateLocationModal" class="btn btn-primary">Create Location</button>
        <input type="search" @oninput="SearchLocation" placeholder="Search..." class="input input-bordered" />
    </header>

    <div class="overflow-x-auto">
        <table class="table table-zebra w-full">
            <thead>
                <tr>
                    <th>Serial No</th>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Manage</th>
                </tr>
            </thead>
            <tbody>
                @if (Locations.Any())
                {
                    int serialNumber = 1;
                    @foreach (var location in Locations)
                    {
                        <tr>
                            <td>@serialNumber</td>
                            <td>@location.Id</td>
                            <td>@location.Name</td>
                            <td>
                                <button @onclick="() => OpenEditLocationModal(location)" class="btn btn-sm btn-warning">‚úèÔ∏è</button>
                                <button @onclick="() => OpenConfirmationModal(location.Id)" class="btn btn-sm btn-danger">üóëÔ∏è</button>
                            </td>
                        </tr>
                        serialNumber++;
                    }
                }
                else
                {
                    <tr>
                        <td colspan="4" class="text-center">No locations found</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    @if (IsLocationModalOpen)
    {
        <div class="modal modal-open">
            <div class="modal-box bg-base-200">
                <h2 class="font-bold text-lg">@LocationModalTitle</h2>
                <EditForm Model="@LocationModel" OnSubmit="SaveLocation">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-group">
                        <label for="name" class="label">Name</label>
                        <InputText id="name" class="input w-full" @bind-Value="LocationModel.Name" />
                    </div>
                    <div class="form-group mt-4">
                        <button type="submit" class="btn btn-primary">@LocationModalButtonText</button>
                        <button type="button" @onclick="CloseLocationModal" class="btn btn-secondary ml-2">Cancel</button>
                    </div>
                </EditForm>
            </div>
        </div>
    }

    @if (IsConfirmationModalOpen)
    {
        <div class="modal modal-open">
            <div class="modal-box bg-base-200">
                <h2 class="font-bold text-lg">Confirm Deletion</h2>
                <p>Are you sure you want to delete this location?</p>
                <div class="form-group mt-4 ">
                    <button @onclick="DeleteLocation" class="btn btn-primary">Yes</button>
                    <button @onclick="CloseConfirmationModal" class="btn btn-secondary ml-2">Cancel</button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private IEnumerable<GetLocationResponseDTO> Locations { get; set; } = Enumerable.Empty<GetLocationResponseDTO>();
    private AddLocationRequestDTO LocationModel { get; set; } = new();
    private bool IsLocationModalOpen { get; set; } = false;
    private bool IsConfirmationModalOpen { get; set; } = false;
    private string LocationModalTitle { get; set; } = "Create Location";
    private string LocationModalButtonText { get; set; } = "Create";
    private IEnumerable<GetLocationResponseDTO> PermanentLocations { get; set; } = Enumerable.Empty<GetLocationResponseDTO>();
    private Guid IdHolder { get; set; } = Guid.Empty;
    private bool Loading { get; set; } = false;

    bool CanDelete { get; set; } = false;
    [CascadingParameter] public Task<AuthenticationState> UserAuthState { get; set; }
    private ClaimsPrincipal? User { get; set; }
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        User = (await UserAuthState).User;
        CanDelete = customAuthorizationService.CustomClaimChecker(User, DefaultClaims.Delete);

        homeGenericState.StateChanged += StateButtonClicked;
        await LoadLocations();

        hubConnection = netcodeHubConnectionService.GetHubConnection();
        hubConnection.On<string>("Notify", async (clientId) =>
        {
            await CallWhenNotified();
        });

        if (hubConnection.State == HubConnectionState.Disconnected)
        {
            await hubConnection.StartAsync();
        }
    }

    private void StateButtonClicked()
    {
        string adminOrderUrl = "app/administration/products/orders";
        if (homeGenericState.IsAdmin)
        {
            Navigation.NavigateTo($"{adminOrderUrl}/{homeGenericState.StateName}");
        }
    }

    private async Task CallWhenNotified()
    {
        await LoadLocations(); // Reload locations when notified
        StateHasChanged();
    }

    private async Task LoadLocations()
    {
        using var scope = serviceProvider.CreateScope();
        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
        Locations = await mediator.Send(new GetAllLocationsQuery());
        PermanentLocations = Locations.ToList();
    }

    private void OpenCreateLocationModal()
    {
        LocationModel = new AddLocationRequestDTO();
        LocationModalTitle = "Create Location";
        LocationModalButtonText = "Create";
        IsLocationModalOpen = true;
    }

    private void OpenEditLocationModal(GetLocationResponseDTO location)
    {
        LocationModel = location.Adapt<AddLocationRequestDTO>();
        LocationModalTitle = "Edit Location";
        LocationModalButtonText = "Save";
        IdHolder = location.Id;
        IsLocationModalOpen = true;
    }

    private void CloseLocationModal()
    {
        IsLocationModalOpen = false;
        IdHolder = Guid.Empty;
    }

    private void OpenConfirmationModal(Guid locationId)
    {
        IdHolder = locationId;
        IsConfirmationModalOpen = true;
    }

    private void CloseConfirmationModal()
    {
        IsConfirmationModalOpen = false;
        IdHolder = Guid.Empty;
    }

    private async Task DeleteLocation()
    {
        if (IdHolder == Guid.Empty) return;

        Loading = true;
        using var scope = serviceProvider.CreateScope();
        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
        var response = await mediator.Send(new DeleteLocationCommand(IdHolder));

        await accountService.SaveActivityAsync(new ActivityTrackerRequestDTO
        {
            UserId = User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value,
            Title = "Delete Location method called",
            Description = response.Message,
            OperationState = response.Flag,
            Date = DateTime.UtcNow.Date
        });

        if (response.Flag)
        {
            ToasterService.ShowSuccess("Location deleted successfully");
            await LoadLocations();
        }
        else
        {
            ToasterService.ShowError(response.Message);
        }

        Loading = false;
        CloseConfirmationModal();
    }

    private async Task SaveLocation()
    {
        Loading = true;
        ServiceResponse response;
        using var scope = serviceProvider.CreateScope();
        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();

        if (IdHolder != Guid.Empty)
        {
            var update = LocationModel.Adapt<UpdateLocationRequestDTO>();
            update.Id = IdHolder;
            response = await mediator.Send(new UpdateLocationCommand(update));
        }
        else
        {
            response = await mediator.Send(new CreateLocationCommand(LocationModel));
        }

        if (response.Flag)
        {
            await LoadLocations();
            ToasterService.ShowSuccess(response.Message);
            CloseLocationModal();
        }
        else
        {
            ToasterService.ShowError(response.Message);
        }

        Loading = false;
    }

    private void SearchLocation(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        var searchText = e.Value?.ToString();
        Locations = string.IsNullOrWhiteSpace(searchText)
            ? PermanentLocations
            : PermanentLocations.Where(l => l.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase));

        StateHasChanged();
    }
}
