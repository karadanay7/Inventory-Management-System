@rendermode InteractiveServer
@implements IDisposable
@inject UserActiveOrderCountState userState 
@using WebUI.States.Administration
@inject GenericHomeHeaderState homeGenericState

<div>
      <div class="flex items-center justify-start p-2 ">
            <button class="btn btn-primary" @onclick="ToggleModel">@((isOpen ? "Close Order Data" : "Open Order Data"))</button>
        </div>
        @if (isOpen)
        {
              
    <div>
        <button class="btn btn-warning" @onclick="(()=> homeGenericState.GetProcessingOrderButtonClicked(OrderState.Processing, true))">
            <i></i>
            <span>@userState.ProcessingCount</span>
            Processing
        </button>
        <button class="btn btn-warning" @onclick="(()=> homeGenericState.GetProcessingOrderButtonClicked(OrderState.Delivering, true))">
            <i></i>
            <span>@userState.DeliveringCount</span>
            Delivering
        </button>
          <button class="btn btn-warning" @onclick="(()=> homeGenericState.GetProcessingOrderButtonClicked(OrderState.Delivered, true))">
            <i></i>
            <span>@userState.DeliveredCount</span>
           Delivered
        </button>
           <button class="btn btn-warning" @onclick="(()=> homeGenericState.GetProcessingOrderButtonClicked(OrderState.Cancelled, true))">
            <i></i>
            <span>@userState.CancelledCount</span>
           Cancelled
        </button>

    </div>

        }
        else 
        {
            <div></div>
        }
  
</div>

@code
{
 [CascadingParameter] public Task<AuthenticationState>? UserAuthState { get; set; }
     private bool isOpen = false;
    protected override async Task OnInitializedAsync()
    {
       try{
        string userId =  ( await UserAuthState!).User!.Claims.FirstOrDefault(x => x.Type == ClaimTypes.NameIdentifier)?.Value;
        await userState.GetActiveOrdersCount(userId);
       }
         catch(Exception ex)
         {
              Console.WriteLine(ex.Message);
         }

    }
    public void Dispose() => userState.StateChanged -= StateHasChanged;
            private void ToggleModel()
    {
        isOpen = !isOpen;
    }
   
}